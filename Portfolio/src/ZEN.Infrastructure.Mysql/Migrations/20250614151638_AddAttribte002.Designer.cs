// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZEN.Infrastructure.Mysql.Persistence;

#nullable disable

namespace ZEN.Infrastructure.Mysql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250614151638_AddAttribte002")]
    partial class AddAttribte002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZEN.Domain.Entities.AspUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<double?>("GPA")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<string>("background")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("expOfYear")
                        .HasColumnType("integer");

                    b.Property<string>("facebook_url")
                        .HasColumnType("text");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("github")
                        .HasColumnType("text");

                    b.Property<string>("linkedin_url")
                        .HasColumnType("text");

                    b.Property<string>("mindset")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("position_career")
                        .HasColumnType("text");

                    b.Property<string>("university_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d726c4b1-5a4e-4b89-84af-92c36d3e28aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83309615-b3ff-43f4-9570-cd276fbccb70",
                            Email = "buithanh10112000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUITHANH10112000@GMAIL.COM",
                            NormalizedUserName = "TRUNGTHANH",
                            PasswordHash = "AQAAAAEAACcQAAAAED/5CrSrnoyXt+feHi0NO7bPjy2E+gl5Tpxu9gLyyX0t7Wh19gMIJZB4DaPOj9B1JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "751978da-7429-490f-9307-7343d9c25243",
                            TwoFactorEnabled = false,
                            UserName = "trungthanh",
                            address = "Thành phố Hồ Chí Minh, Vietnam",
                            dob = new DateTime(2003, 11, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            fullname = "Bùi Nguyễn Trung Thành",
                            github = "https://github.com/trungthanhdev",
                            phone_number = "0878508886",
                            university_name = "Trường Đại học Công nghệ TP.HCM - HUTECH"
                        },
                        new
                        {
                            Id = "d3c1945f-a4e0-470b-aabd-88e81fb2a1b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f5e70b3-5b7c-489c-b4e5-fd24fb711d0d",
                            Email = "trunghuy832@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUNGHUY832@GMAIL.COM",
                            NormalizedUserName = "TRUNGHUY",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/qHqS7A33fynGiElPAVykGCTZ792oFGFoJKjvYYOLw4sgEh8NPnlvY9ez/k7ODBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9edcbd37-fa5c-4530-bf5f-d6c67a77883c",
                            TwoFactorEnabled = false,
                            UserName = "trunghuy",
                            address = "Thành phố Hồ Chí Minh, Vietnam",
                            dob = new DateTime(2001, 3, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            fullname = "Nguyễn Trung Huy",
                            github = "https://github.com/trunghuydev",
                            phone_number = "0917764302",
                            university_name = "Trường Đại học Công nghệ TP.HCM - HUTECH"
                        });
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("duration")
                        .HasColumnType("text");

                    b.Property<DateTime?>("from")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("img_url")
                        .HasColumnType("text");

                    b.Property<bool>("is_Reality")
                        .HasColumnType("boolean");

                    b.Property<string>("project_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("project_type")
                        .HasColumnType("text");

                    b.Property<string>("to")
                        .HasColumnType("text");

                    b.Property<string>("url_demo")
                        .HasColumnType("text");

                    b.Property<string>("url_github")
                        .HasColumnType("text");

                    b.Property<string>("url_project")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PROJECT");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("position")
                        .HasColumnType("text");

                    b.Property<string>("skill_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SKILL");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Tech", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("project_id")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("tech_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("project_id");

                    b.ToTable("TECH");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.UserProject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("project_id")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("project_id");

                    b.HasIndex("user_id");

                    b.ToTable("USERPROJECT");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.UserSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SkillId")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("skill_id")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("skill_id");

                    b.HasIndex("user_id");

                    b.ToTable("USERSKILL");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.WorkExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("duration")
                        .HasColumnType("text");

                    b.Property<string>("position")
                        .HasColumnType("text");

                    b.Property<string>("project_id")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("user_id");

                    b.ToTable("WORKEXPERIENCE");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AspUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AspUserId");

                    b.HasIndex("CreatedByIp");

                    b.ToTable("REFRESHTOKEN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.AspUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.AspUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZEN.Domain.Entities.AspUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.AspUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Tech", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.Identities.Project", "Project")
                        .WithMany("Teches")
                        .HasForeignKey("project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.UserProject", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.Identities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("project_id");

                    b.HasOne("ZEN.Domain.Entities.AspUser", "AspUser")
                        .WithMany("UserProjects")
                        .HasForeignKey("user_id");

                    b.Navigation("AspUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.UserSkill", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.Identities.Skill", null)
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId");

                    b.HasOne("ZEN.Domain.Entities.Identities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("skill_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZEN.Domain.Entities.AspUser", "AspUser")
                        .WithMany("UserSkills")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AspUser");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.WorkExperience", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.AspUser", "AspUser")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("user_id");

                    b.Navigation("AspUser");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("ZEN.Domain.Entities.AspUser", "AspUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AspUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AspUser");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.AspUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserProjects");

                    b.Navigation("UserSkills");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Project", b =>
                {
                    b.Navigation("Teches");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("ZEN.Domain.Entities.Identities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
